{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { FilledStar, EmptyStar } from \"./includes/lib\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Rating = function Rating(_ref) {\n  var maxStars = _ref.maxStars,\n    stars = _ref.stars,\n    size = _ref.size,\n    color = _ref.color,\n    bordered = _ref.bordered;\n  var _number = maxStars != null ? maxStars : 5;\n  var _stars = stars != null ? stars : 0;\n  var _size = size != null ? size : 25;\n  var _color = color != null ? color : \"#FFDF00\";\n  var _bordered = bordered != null ? bordered : false;\n  return _jsx(View, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    children: Array(_number).fill(\"\\u4215485\").map(function (item, index) {\n      if (_bordered) {\n        return _jsx(EmptyStar, {\n          size: _size,\n          color: _stars <= index + 1 ? \"#BABABA\" : _color\n        }, index);\n      } else {\n        if (_stars >= index + 1) {\n          return _jsx(FilledStar, {\n            size: _size,\n            color: _color\n          }, index);\n        } else {\n          return _jsx(EmptyStar, {\n            size: _size,\n            color: _color\n          }, index);\n        }\n      }\n    })\n  });\n};\nvar RatingInput = function RatingInput(_ref2) {\n  var rating = _ref2.rating,\n    setRating = _ref2.setRating,\n    maxStars = _ref2.maxStars,\n    size = _ref2.size,\n    color = _ref2.color,\n    bordered = _ref2.bordered,\n    _ref2$onRating = _ref2.onRating,\n    onRating = _ref2$onRating === void 0 ? function () {} : _ref2$onRating;\n  var _number = maxStars != null ? maxStars : 5;\n  var _size = size != null ? size : 25;\n  var _color = color != null ? color : \"#FFDF00\";\n  var _bordered = bordered != null ? bordered : false;\n  var _React$useState = React.useState(true),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    _firstRender = _React$useState2[0],\n    setFirstRender = _React$useState2[1];\n  var _anim = React.useRef(new Animated.Value(1)).current;\n  var _up = function _up() {\n    Animated.timing(_anim, {\n      toValue: 1.5,\n      duration: 150,\n      useNativeDriver: true\n    }).start(function (_ref3) {\n      var finished = _ref3.finished;\n      _down();\n    });\n  };\n  var _down = function _down() {\n    Animated.timing(_anim, {\n      toValue: 1,\n      duration: 50,\n      useNativeDriver: true\n    }).start();\n  };\n  React.useEffect(function () {\n    if (!_firstRender) {\n      onRating();\n    }\n  }, [rating]);\n  return _jsx(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    children: Array(_number).fill(\"\\u4215488\").map(function (item, index) {\n      if (_bordered) {\n        return _jsx(Animated.View, {\n          children: _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              _up();\n              setRating(index + 1);\n              setFirstRender(false);\n            },\n            style: rating == index + 1 ? {\n              transform: [{\n                scale: _anim\n              }]\n            } : null,\n            children: _jsx(EmptyStar, {\n              size: _size,\n              color: rating < index + 1 ? \"#BABABA\" : _color\n            })\n          })\n        }, index);\n      } else {\n        if (rating < index + 1) {\n          return _jsx(Animated.View, {\n            children: _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                _up();\n                setRating(index + 1);\n                setFirstRender(false);\n              },\n              style: rating == index + 1 ? {\n                transform: [{\n                  scale: _anim\n                }]\n              } : null,\n              children: _jsx(EmptyStar, {\n                size: _size,\n                color: _color\n              })\n            })\n          }, index);\n        } else {\n          return _jsx(Animated.View, {\n            children: _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                _up();\n                setRating(index + 1);\n                setFirstRender(false);\n              },\n              style: rating == index + 1 ? {\n                transform: [{\n                  scale: _anim\n                }]\n              } : null,\n              children: _jsx(FilledStar, {\n                size: _size,\n                color: _color\n              })\n            })\n          }, index);\n        }\n      }\n    })\n  });\n};\nexport { Rating, RatingInput };","map":{"version":3,"names":["React","View","TouchableOpacity","Animated","FilledStar","EmptyStar","jsx","_jsx","Rating","_ref","maxStars","stars","size","color","bordered","_number","_stars","_size","_color","_bordered","style","flexDirection","alignItems","children","Array","fill","map","item","index","RatingInput","_ref2","rating","setRating","_ref2$onRating","onRating","_React$useState","useState","_React$useState2","_slicedToArray","_firstRender","setFirstRender","_anim","useRef","Value","current","_up","timing","toValue","duration","useNativeDriver","start","_ref3","finished","_down","useEffect","onPress","transform","scale"],"sources":["C:/Users/user/Downloads/Projects/1-JavaScript/travel_app/travel_app/node_modules/react-native-stock-star-rating/index.tsx"],"sourcesContent":["import React,{JSXElementConstructor} from 'react';\r\nimport { View,Text, TouchableOpacity, Animated } from 'react-native';\r\nimport { FilledStar, EmptyStar } from './includes/lib';\r\n\r\n\r\n\r\ninterface RatingProps {\r\n\r\n    /**\r\n    * Max number of stars to show (Default 5)\r\n    */\r\n     maxStars?: number,\r\n\r\n    /**\r\n    * Rating stars to show (Default 0)\r\n    */\r\n     stars?: number,\r\n\r\n    /**\r\n    * Size of the stars\r\n    */\r\n     size?: number,\r\n\r\n    /**\r\n    * Color of the stars\r\n    */\r\n     color?: string,\r\n    \r\n    /**\r\n    * If bordered stars are to be shown\r\n    */\r\n     bordered?: boolean,\r\n}\r\n\r\n\r\nconst Rating: React.FC<RatingProps> = ({\r\n    maxStars,\r\n    stars,\r\n    size,\r\n    color,\r\n    bordered\r\n}) => {\r\n\r\n    const _number = maxStars ?? 5;\r\n    const _stars = stars ?? 0;\r\n    const _size = size ?? 25;\r\n    const _color = color ?? \"#FFDF00\";\r\n    const _bordered = bordered ?? false;\r\n\r\n\r\n    return(\r\n        <View style={{flexDirection: 'row', alignItems: 'center'}}>\r\n            {\r\n                Array(_number).fill('\\u4215485').map((item, index) => {\r\n                    if(_bordered) {\r\n                        return (\r\n                            <EmptyStar \r\n                                key={index} \r\n                                size={_size} \r\n                                color={\r\n                                    (_stars <= (index+1)) ? \"#BABABA\" :_color\r\n                                } \r\n                            />\r\n                        )\r\n                    }else{\r\n                        if(_stars >= (index+1)){\r\n                            return <FilledStar key={index} size={_size} color={_color} />\r\n                        }else{\r\n                            return <EmptyStar key={index} size={_size} color={_color} />\r\n                        }\r\n                    }\r\n                    \r\n                })\r\n            }\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\ninterface RatingInputProps {\r\n    /**\r\n    * State variable that will store the rating\r\n    */\r\n     rating: number,\r\n\r\n     /**\r\n    * Function to set the rating which will be stored in your local state\r\n    */\r\n      setRating: React.Dispatch<React.SetStateAction<undefined>>,\r\n\r\n    /**\r\n    * Max number of stars to show (Default 5)\r\n    */\r\n     maxStars?: number,\r\n\r\n    /**\r\n    * Rating stars to show (Default 0)\r\n    */\r\n     stars?: number,\r\n\r\n    /**\r\n    * Size of the stars\r\n    */\r\n     size?: number,\r\n\r\n    /**\r\n    * Color of the stars\r\n    */\r\n     color?: string,\r\n    \r\n    /**\r\n    * If bordered stars are to be shown\r\n    */\r\n     bordered?: boolean,\r\n    \r\n    /**\r\n    * Callback Function to call after the rating is given\r\n    */\r\n     onRating?: () => void,\r\n}\r\n\r\nconst RatingInput: React.FC<RatingInputProps> = ({ \r\n    rating,\r\n    setRating,\r\n    maxStars,\r\n    size,\r\n    color,\r\n    bordered,\r\n    onRating = () => {}\r\n}) => {\r\n\r\n    const _number = maxStars ?? 5;\r\n    const _size = size ?? 25;\r\n    const _color = color ?? \"#FFDF00\";\r\n    const _bordered = bordered ?? false;\r\n    const [_firstRender, setFirstRender] = React.useState(true);\r\n\r\n    const _anim = React.useRef(new Animated.Value(1)).current;\r\n\r\n\r\n    const _up = () => {\r\n        Animated.timing(_anim, {\r\n            toValue: 1.5,\r\n            duration: 150,\r\n            useNativeDriver: true\r\n        }).start(({finished}) => {\r\n            _down();\r\n        });\r\n    };\r\n\r\n\r\n    const _down = () => {\r\n        Animated.timing(_anim, {\r\n            toValue: 1,\r\n            duration: 50,\r\n            useNativeDriver: true\r\n        }).start();\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if(!_firstRender){\r\n            onRating();\r\n        }  \r\n    }, [rating])\r\n    \r\n\r\n    return(\r\n        <View style={{flexDirection: 'row'}}>\r\n            {\r\n                Array(_number).fill('\\u4215488').map((item, index) => {\r\n                    if(_bordered) {\r\n                        return(\r\n                            <Animated.View key={index}>\r\n                                <TouchableOpacity     \r\n                                    onPress={ \r\n                                        () => { \r\n                                            _up();\r\n                                            setRating(index+1);\r\n                                            setFirstRender(false);\r\n                                        } \r\n                                    }\r\n                                    style={(rating == (index+1)) ? {transform: [{scale: _anim}]} : null}\r\n                                >\r\n                                    <EmptyStar \r\n                                        size={_size} \r\n                                        color={\r\n                                            (rating < (index+1)) ? \"#BABABA\" : _color\r\n                                        } \r\n                                    />\r\n                                </TouchableOpacity>\r\n                            </Animated.View>\r\n                        )\r\n                        \r\n                    }else{\r\n                        if(rating < (index+1)){\r\n                            return(\r\n                                <Animated.View key={index}>\r\n                                    <TouchableOpacity \r\n                                        onPress={ \r\n                                            () => {\r\n                                                _up();\r\n                                                setRating(index+1);\r\n                                                setFirstRender(false);\r\n                                            }  \r\n                                        }\r\n                                        style={(rating == (index+1)) ? {transform: [{scale: _anim}]} : null}\r\n\r\n                                    >\r\n                                        <EmptyStar size={_size} color={_color} />\r\n                                    </TouchableOpacity>\r\n                                </Animated.View>\r\n                            )\r\n                        }else{\r\n                            return(\r\n                                <Animated.View key={index}>\r\n                                    <TouchableOpacity  \r\n                                        onPress={\r\n                                            () => {\r\n                                                _up()\r\n                                                setRating(index+1);\r\n                                                setFirstRender(false);\r\n                                            } \r\n                                        } \r\n                                        style={(rating == (index+1)) ? {transform: [{scale: _anim}]} : null}\r\n                                    >\r\n                                        <FilledStar  size={_size} color={_color} />\r\n                                    </TouchableOpacity>\r\n                                </Animated.View>\r\n                            )\r\n                        }\r\n                    }    \r\n                })\r\n            }\r\n            \r\n        </View>\r\n        \r\n    )\r\n}\r\n\r\nexport  { Rating, RatingInput };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}